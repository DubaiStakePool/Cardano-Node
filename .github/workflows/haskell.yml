name: Haskell Windows & Mac CI

on:
  push:
  merge_group:

# When pushing branches (and/or updating PRs), we do want to cancel previous
# build runs. We assume they are stale now; and do not want to spend CI time and
# resources on continuing to continue those runs. This is what the concurrency.group
# value lets us express. When using merge queues, we now have to consider
# - runs triggers by commits per pull-request
#   we want to cancel any previous run. So they should all get the same group (per PR)
# - runs refs/heads/gh-readonly-queue/<target branch name> (they should all get their
#   unique git ref, we don't want to cancel any of the ones in the queue)
# - if it's neither, we fall back to the run_id (this is a unique number for each
#   workflow run; it does not change if you "rerun" a job)
concurrency:
  group: ${{ github.workflow }}-${{ github.event.type }}-${{ startsWith(github.ref, 'refs/heads/gh-readonly-queue/') && github.ref || github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        ghc: ["9.2.7"]
        cabal: ["3.10.1.0"]
        os: [macos-latest, windows-latest]

    env:
      # Modify this value to "invalidate" the cabal cache.
      CABAL_CACHE_VERSION: "2022-12-30"

      # Modify this value to "invalidate" the secp cache.
      SECP_CACHE_VERSION: "2022-12-30"

      # current ref from: 27.02.2022
      SECP256K1_REF: ac83be33d0956faf6b7f61a60ab524ef7d6a473a

    steps:
    - name: Install Haskell
      uses: input-output-hk/setup-haskell@v1
      id: setup-haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}
        pacman-packages: >
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-libsodium
          mingw-w64-x86_64-openssl
          base-devel
          autoconf-wrapper
          autoconf
          automake
          libtool
          make

    - uses: actions/checkout@v3

    - name: "[PowerShell] Add build script path"
      if: runner.os == 'Windows'
      shell: pwsh
      run: Add-Content $env:GITHUB_PATH "$(pwd)/.github/bin"

    - name: "[Bash] Add build script path"
      if: runner.os != 'Windows'
      run: echo "$(pwd)/.github/bin" >> $GITHUB_PATH

    - name: "MAC: Install build environment (brew)"
      if: runner.os == 'macOS'
      run: |
        brew install libsodium

    - name: "MAC: Install build environment (for secp256k1)"
      if: runner.os == 'macOS'
      run: brew install autoconf automake libtool

    - name: Install secp256k1
      uses: input-output-hk/setup-secp256k1@v1
      with:
        git-ref: ${{ env.SECP256K1_REF }}
        cache-version: ${{ env.SECP_CACHE_VERSION }}

    - name: Cabal update
      run: cabal update

    - name: Configure build
      shell: bash
      run: |
        cp ".github/workflows/cabal.project.local.ci.$(uname -s)" cabal.project.local
        echo "# cabal.project.local"
        cat cabal.project.local

    - name: Build dry run
      run: |
        # The tests call out to msys2 commands. We generally do not want to mix toolchains, so
        # we are very deliberate about only adding msys64 to the path where absolutely necessary.
        ${{ (runner.os == 'Windows' && '$env:PATH=("C:\msys64\mingw64\bin;{0}" -f $env:PATH)') || '' }}
        cabal build all --dry-run --minimize-conflict-set

    # For users who fork cardano-node and want to define a writable cache, then can set up their own
    # S3 bucket then define in their forked repository settings the following secrets:
    #
    #   AWS_ACCESS_KEY_ID
    #   AWS_SECRET_ACCESS_KEY
    #   BINARY_CACHE_URI
    #   BINARY_CACHE_REGION
    - name: Cabal cache over S3
      uses: action-works/cabal-cache-s3@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      with:
        region: ${{ secrets.BINARY_CACHE_REGION }}
        dist-dir: dist-newstyle
        store-path: ${{ steps.setup-haskell.outputs.cabal-store }}
        threads: 16
        archive-uri: ${{ secrets.BINARY_CACHE_URI }}/${{ env.CABAL_CACHE_VERSION }}/${{ runner.os }}
        skip: "${{ secrets.BINARY_CACHE_URI == '' }}"

    # It's important to ensure that people who fork this repository can not only successfully build in
    # CI by default, but also have meaning cabal store caching.
    #
    # Because syncing with S3 requires credentials, we cannot rely on S3 for this. For this reason a
    # https fallback is used. The https server mirrors the content of the S3 bucket. The https cabal
    # store archive is read-only for security reasons.
    #
    # Users who fork this repository who want to have a writable cabal store archive are encouraged
    # to set up their own S3 bucket.
    - name: Cabal cache over HTTPS
      uses: action-works/cabal-cache-s3@v1
      with:
        dist-dir: dist-newstyle
        store-path: ${{ steps.setup-haskell.outputs.cabal-store }}
        threads: 16
        archive-uri: https://iohk.cache.haskellworks.io/${{ env.CABAL_CACHE_VERSION }}/${{ runner.os }}
        skip: "${{ secrets.BINARY_CACHE_URI != '' }}"
        enable-save: false

    - name: Build core components
      run: |
        # The tests call out to msys2 commands. We generally do not want to mix toolchains, so
        # we are very deliberate about only adding msys64 to the path where absolutely necessary.
        ${{ (runner.os == 'Windows' && '$env:PATH=("C:\msys64\mingw64\bin;{0}" -f $env:PATH)') || '' }}
        cabal build cardano-node cardano-cli cardano-node-chairman cardano-submit-api -j1

    - name: Build remaining components
      run: |
        # The tests call out to msys2 commands. We generally do not want to mix toolchains, so
        # we are very deliberate about only adding msys64 to the path where absolutely necessary.
        ${{ (runner.os == 'Windows' && '$env:PATH=("C:\msys64\mingw64\bin;{0}" -f $env:PATH)') || '' }}
        cabal build all

    - name: Run tests
      env:
        TMPDIR: ${{ runner.temp }}
        TMP: ${{ runner.temp }}
        KEEP_WORKSPACE: 1
      run: |
        # The tests call out to msys2 commands. We generally do not want to mix toolchains, so
        # we are very deliberate about only adding msys64 to the path where absolutely necessary.
        ${{ (runner.os == 'Windows' && '$env:PATH=("C:\msys64\mingw64\bin;{0}" -f $env:PATH)') || '' }}
        cabal test cardano-api cardano-node cardano-cli

    - name: "Tar artifacts"
      shell: bash
      run: |
        mkdir -p artifacts

        for exe in $(
            cat dist-newstyle/cache/plan.json | jq -r '
                ."install-plan"[]
              | select(
                  .style == "local" and
                  (."component-name" | type == "string" ) and
                  (."component-name" | (startswith("exe:") or startswith("test:")))
                )
              | ."bin-file"
              '); do
          if [ -f $exe ]; then
            echo "Including artifact $exe"

            cp "$exe" artifacts/
          else
            echo "Skipping artifact $exe"
          fi
        done

        cp dist-newstyle/cache/plan.json artifacts/

    - name: Save Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: artifacts-${{ matrix.os }}-${{ matrix.ghc }}-${{ github.run_id }}
        path: artifacts

    - name: Workspace
      run: |
        echo ${{ github.workspace }}
        echo $GITHUB_WORKSPACE

  integration-tests:
    needs: [build]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        ghc: ["9.2.7"]
        cabal: ["3.8.1.0"]
        os: [macos-latest, windows-latest]

    env:
      # Modify this value to "invalidate" the cabal cache.
      CABAL_CACHE_VERSION: "2022-12-30"

      # Modify this value to "invalidate" the secp cache.
      SECP_CACHE_VERSION: "2022-12-30"

      # current ref from: 27.02.2022
      SECP256K1_REF: ac83be33d0956faf6b7f61a60ab524ef7d6a473a

    steps:
    - name: Install Haskell
      uses: input-output-hk/setup-haskell@v1
      id: setup-haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}
        pacman-packages: >
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-libsodium
          mingw-w64-x86_64-openssl
          base-devel
          autoconf-wrapper
          autoconf
          automake
          libtool
          make

    - uses: actions/checkout@v2

    - name: "[PowerShell] Add build script path"
      if: runner.os == 'Windows'
      shell: pwsh
      run: Add-Content $env:GITHUB_PATH "$(pwd)/.github/bin"

    - name: "[Bash] Add build script path"
      if: runner.os != 'Windows'
      run: echo "$(pwd)/.github/bin" >> $GITHUB_PATH

    - name: "MAC: Install build environment (brew)"
      if: runner.os == 'macOS'
      run: |
        brew install libsodium

    - name: "MAC: Install build environment (for secp256k1)"
      if: runner.os == 'macOS'
      run: brew install autoconf automake libtool

    - name: Install secp256k1
      uses: input-output-hk/setup-secp256k1@v1
      with:
        git-ref: ${{ env.SECP256K1_REF }}
        cache-version: ${{ env.SECP_CACHE_VERSION }}

    - uses: actions/checkout@v2

    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with:
        name: artifacts-${{ matrix.os }}-${{ matrix.ghc }}-${{ github.run_id }}
        path: ./artifacts

    - name: Extract artifacts
      shell: bash
      run: |
        mkdir -p dist-newstyle/cache
        cp artifacts/plan.json dist-newstyle/cache/plan.json

    - name: "[PowerShell] Add artifact path"
      if: runner.os == 'Windows'
      shell: pwsh
      run: Add-Content $env:GITHUB_PATH "$(pwd)/artifacts"

    - name: "[Bash] Add artifact path"
      if: runner.os != 'Windows'
      shell: bash
      run: |
        echo "$(pwd)/artifacts" >> $GITHUB_PATH
        for x in $(find artifacts -type f); do
          if file $x | grep executable; then
            chmod a+x $x
          fi
        done

    - name: "[Bash] Setup environment"
      shell: bash
      run: |
        echo "CARDANO_CLI=cardano-cli" >> $GITHUB_ENV
        echo "CARDANO_NODE=cardano-node" >> $GITHUB_ENV
        echo "CARDANO_NODE_CHAIRMAN=cardano-node-chairman" >> $GITHUB_ENV

    - name: "[Bash] Copy files for hedgehog"
      shell: bash
      run: |
        # Copy source files into locations so that hedgehog can find them
        mkdir -p tmp
        ( cd tmp
          for source in $(find ../cardano-testnet/src -name '*.hs'; find ../cardano-node-chairman/test -name '*.hs'); do
            target=$(echo $source | cut -d / -f 4-)
            mkdir -p $(dirname src/$target)
            ln -s $(readlink -f $source) src/$target
          done
        )

    - name: Run testnet tests
      env:
        TMPDIR: ${{ runner.temp }}
        TMP: ${{ runner.temp }}
        KEEP_WORKSPACE: 1
      run: |
        # The tests call out to msys2 commands. We generally do not want to mix toolchains, so
        # we are very deliberate about only adding msys64 to the path where absolutely necessary.
        ${{ (runner.os == 'Windows' && '$env:PATH=("C:\msys64\mingw64\bin;{0}" -f $env:PATH)') || '' }}
        cd cardano-testnet
        cardano-testnet-tests

    - name: Run chairman tests
      env:
        TMPDIR: ${{ runner.temp }}
        TMP: ${{ runner.temp }}
        KEEP_WORKSPACE: 1
      run: |
        # The tests call out to msys2 commands. We generally do not want to mix toolchains, so
        # we are very deliberate about only adding msys64 to the path where absolutely necessary.
        ${{ (runner.os == 'Windows' && '$env:PATH=("C:\msys64\mingw64\bin;{0}" -f $env:PATH)') || '' }}
        cd cardano-node-chairman
        chairman-tests

    - name: Setup tmate session
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3
      with:
        limit-access-to-actor: true

  build-complete:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Build complete
      run: echo 'Build complete'

  release:
    needs: [build]
    if: ${{ startsWith(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create Release Tag
      id: create_release_tag
      run: ｜
        echo "TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false

    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: artifacts-ubuntu-latest

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts-ubuntu-latest/cardano-submit-api.tar.gz
        asset_name: cardano-submit-api_${{ steps.create_release_tag.outputs.TAG }}-linux.tar.gz
        asset_content_type: application/gzip
