name: Haskell CI

on:
  push:
  workflow_dispatch:
    inputs:
      tests:
        description: 'Tests'
        required: false
        default: 'some'
        options:
        - some
        - all
  create:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        # Add more elements to this list to run multiple instances of the build in CI.  Increasing the
        # number instances is a good way to trigger flaky build failures
        n: [1]

        ghc: ["8.10.7"]
        os: [ubuntu-latest, macos-latest, windows-latest]

    env:
      # current ref from: 27.02.2022
      SECP256K1_REF: ac83be33d0956faf6b7f61a60ab524ef7d6a473a
      # OpenSSL is installed in a non-standard location in MacOS. See
      # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-11-Readme.md
      PKG_CONFIG_PATH: ${{ matrix.os == 'macos-latest' && '/usr/local/opt/openssl@1.1/lib/pkgconfig' || '' }}

    steps:
    - name: "WIN: Install System Dependencies via pacman (msys2)"
      if: runner.os == 'Windows'
      run: |
        # ghcup should be installed on current GHA Windows runners. Let's use ghcup to run
        # pacman, to install the necessary dependencies, ...
        ghcup run -- pacman --noconfirm -S `
           mingw-w64-x86_64-pkg-config `
           mingw-w64-x86_64-libsodium `
           base-devel `
           autoconf-wrapper `
           autoconf `
           automake `
           libtool `
           make
 
    # this seems to break something. It _must_ come after the pacman setup
    # above. It appears as if PATHEXT is set _after_ ghcup install ghc/cabal, and
    # as such we'd need pacman.exe instead.
    - name: Setup Haskell
      run: |        
        # Use GHCUP to manage ghc/cabal
        ghcup install ghc --set ${{ matrix.ghc }}
        ghcup install cabal --set 3.6.2.0

        ghc --version
        cabal --version

    - name: "WIN: fixup cabal config"
      if: runner.os == 'Windows'
      run: |
        # make sure cabal knows about msys64, and mingw64 tools. Not clear why C:/cabal/config is empty
        # and C:/cabal doesn't even exist.  The ghcup bootstrap file should have create it in the image:
        # See https://github.com/haskell/ghcup-hs/blob/787edc17af4907dbc51c85e25c490edd8d68b80b/scripts/bootstrap/bootstrap-haskell#L591
        # So we'll do it by hand here for now.
        #
        # We'll _not_ add extra-include-dirs, or extra-lib-dirs, and rely on what's shipped with GHC.
        # https://github.com/msys2/MINGW-packages/issues/10837#issuecomment-1047105402
        # https://gitlab.haskell.org/ghc/ghc/-/issues/21111
        # if we _do_ want them, this would be the lines to add below
        
        $ghcMingwDir = Join-Path -Path $(ghc --print-libdir) `
                                 -ChildPath ../mingw/x86_64-*-mingw32/lib/ `
                                 -Resolve
        
        cabal user-config -a "extra-prog-path: C:/msys64/mingw64/bin, C:/msys64/usr/bin" `
                          -a "extra-include-dirs: C:/msys64/mingw64/include" `
                          -a ("extra-lib-dirs: {0}, C:/msys64/mingw64/lib" -f $ghcMingwDir) `
                          -f init

    - name: "OUTPUT Record cabal-store (Linux)"
      id: lin-setup-haskell
      shell: bash
      if: runner.os != 'Windows'
      run: |
        echo "cabal-store=/home/runner/.cabal/store" >> $GITHUB_OUTPUT
        
    - name: "OUTPUT Record cabal-store (Windows)"
      id: win-setup-haskell
      shell: bash
      if: runner.os == 'Windows'
      run: |
        echo "cabal-store=C:\\cabal\\store" >> $GITHUB_OUTPUT    

    - name: "[OUTPUT] cache keys: version, weeknum"
      id: cache-keys
      shell: bash
      run: |
        echo "weeknum=$(/usr/bin/date -u "+%W")" >> $GITHUB_OUTPUT
        echo "CACHE_VERSION=grFfw8r" >> $GITHUB_OUTPUT

    - uses: actions/checkout@v2

    - name: Add build script path
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          # MSYS2 doesn't inherit $GITHUB_PATH, so this workaround is needed
          cat <(echo "export PATH=$PATH:$(pwd)/.github/bin") ~/.bashrc > ~/.bashrc.new
          mv ~/.bashrc.new ~/.bashrc
        else
          # MacOS and Linux use $GITUB_PATH
          echo "$(pwd)/.github/bin" >> $GITHUB_PATH
        fi

    - name: "LINUX: Install build environment (apt-get)"
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get -y install libsodium23 libsodium-dev
        sudo apt-get -y install libsystemd0 libsystemd-dev
        sudo apt-get -y remove --purge software-properties-common
        sudo apt-get -y autoremove

    - name: "LINUX: Install build environment (for secp256k1)"
      if: runner.os == 'Linux'
      run: |
        sudo apt-get -y install autoconf automake libtool
        echo "CI_SECP_FLAGS=--prefix=/usr" >> $GITHUB_ENV
        echo "CI_SECP_INSTALL_CMD=sudo" >> $GITHUB_ENV

    - name: "MAC: Install build environment (brew)"
      if: runner.os == 'macOS'
      run: |
        brew install libsodium

    - name: "MAC: Install build environment (for secp256k1)"
      if: runner.os == 'macOS'
      run: brew install autoconf automake libtool

    - name: "Install secp256k1"
      run: |
        git clone https://github.com/bitcoin-core/secp256k1.git
        ( cd secp256k1
          git reset --hard $SECP256K1_REF
          ./autogen.sh
          ./configure $CI_SECP_FLAGS --enable-module-schnorrsig --enable-experimental
          make
          make check
          $CI_SECP_INSTALL_CMD make install
        )

    - name: "List all pkg-config packages"
      run: |
        if [ "${{ runner.os }}" == "macOS" ]; then
          echo "=== Not printing every package detail in MacOS"
          # due to the location of the installed libraries this fails on MacOS with stuff not related to us
        else
          echo "=== Package list ==="
          pkg-config --list-all

          echo "=== Package details ==="
          for x in $(pkg-config --list-all | cut -d ' ' -f 1); do
            echo "# $x"
            pkg-config "$x" --cflags --libs
          done
        fi

    - name: Cabal update
      run: retry 2 cabal update

    - name: Configure build
      run: |
        if [ "${{github.event.inputs.tests}}" == "all" ]; then
          echo "Reconfigure cabal projects to run tests for all dependencies"
          sed -i 's|tests: False|tests: True|g' cabal.project
        fi

        cp ".github/workflows/cabal.project.local.ci.$(uname -s)" cabal.project.local

        echo "# cabal.project.local"
        cat cabal.project.local

    - name: Record dependencies
      id: record-deps
      run: |
        cabal build all --dry-run
        cat ${{ env.PLAN_JSON }} | jq -r '."install-plan"[].id' | sort | uniq > dependencies.txt
        date > date.txt
        echo "weeknum=$(/bin/date -u "+%W")" >> $GITHUB_OUTPUT

    - name: Cache Cabal store
      uses: actions/cache@v2
      with:
        path: ${{ runner.os == 'Windows' && steps.win-setup-haskell.outputs.cabal-store || steps.lin-setup-haskell.outputs.cabal-store }}
        key: cache-${{ steps.cache-keys.outputs.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('dependencies.txt') }}-${{ hashFiles('date.txt') }}
        restore-keys: |
          cache-${{ steps.cache-keys.outputs.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('dependencies.txt') }}
          cache-${{ steps.cache-keys.outputs.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}

    - uses: actions/cache@v2
      name: "Cache `dist-newstyle`"
      with:
        path: |
          dist-newstyle
          !dist-newstyle/**/.git
        key: cache-dist-${{ steps.cache-keys.outputs.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ steps.cache-keys.outputs.weeknum }}
        restore-keys: cache-dist-${{ steps.cache-keys.outputs.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}

    - name: Build
      run: cabal build cardano-node cardano-cli cardano-node-chairman cardano-submit-api -j

    - name: Run tests
      run: |
        if [ "${{github.event.inputs.tests}}" == "all" ]; then
          TMPDIR="${{ runner.temp }}" TMP="${{ runner.temp }}" KEEP_WORKSPACE=1 cabal test all;
        else
          TMPDIR="${{ runner.temp }}" TMP="${{ runner.temp }}" KEEP_WORKSPACE=1 cabal test \
            cardano-testnet \
            cardano-api \
            cardano-node \
            cardano-node-chairman \
            cardano-cli \
            cardano-submit-api
        fi


    - name: "Tar artifacts"
      run: |
        mkdir -p artifacts

        for exe in $(cat dist-newstyle/cache/plan.json | jq -r '."install-plan"[] | select(.style == "local" and (."component-name" | startswith("exe:"))) | ."bin-file"'); do
          if [ -f $exe ]; then
            echo "Including artifact $exe"

            ( cd artifacts
              tar -C "$(dirname $exe)" -czf "$(basename $exe).tar.gz" "$(basename $exe)"
            )
          else
            echo "Skipping artifact $exe"
          fi
        done

    - name: Save Artifact
      if: matrix.ghc == '8.10.7'
      uses: actions/upload-artifact@v1
      with:
        name: artifacts-${{ matrix.os }}
        path: ./artifacts

    - name: Delete socket files in chairman tests in preparation for uploading artifacts
      if: ${{ always() }}
      run: |
        if [ -d "${{ runner.temp }}/chairman" ]; then
          find "${{ runner.temp }}/chairman" -type s -exec rm -f {} \;
        fi

    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      continue-on-error: true
      with:
        name: chairman-test-artifacts-${{ matrix.os }}-${{ matrix.n }}-${{ matrix.ghc }}
        path: ${{ runner.temp }}/chairman/

  release:
    needs: [build]
    if: ${{ startsWith(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2.3.4

    - name: Create Release Tag
      id: create_release_tag
      run: ｜
        echo "TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false

    - name: Download Artifact
      uses: actions/download-artifact@v1
      with:
        name: artifacts-ubuntu-latest

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts-ubuntu-latest/cardano-submit-api.tar.gz
        asset_name: cardano-submit-api_${{ steps.create_release_tag.outputs.TAG }}-linux.tar.gz
        asset_content_type: application/gzip
